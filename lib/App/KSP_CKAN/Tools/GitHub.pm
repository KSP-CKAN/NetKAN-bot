package App::KSP_CKAN::Tools::GitHub;

use v5.010;
use strict;
use warnings;
use autodie;
use Method::Signatures 20140224;
use Try::Tiny;
use Net::GitHub::V3;
use Moo;
use namespace::clean;

# ABSTRACT: A thin wrapper around Http::Tiny

# VERSION: Generated by DZP::OurPkg:Version

=head1 SYNOPSIS

  use App::KSP_CKAN::Tools::GitHub;

  my $http = App::KSP_CKAN::Tools::GitHub->new( config => $config );

=head1 DESCRIPTION

Provides thinly wrapped github functionality.

=cut

my $Ref = sub {
  croak("auth isn't a 'App::KSP_CKAN::Tools::Config' object!") unless $_[0]->DOES("App::KSP_CKAN::Tools::Config");
};

has 'config'    => ( is => 'ro', required => 1, isa => $Ref );
has '_github'   => ( is => 'ro', lazy => 1, builder => 1 );
has 'repo'      => ( is => 'ro', lazy => 1, builder => 1 );
has 'user'      => ( is => 'ro', lazy => 1, builder => 1 );

method _build__github {
  my $gh = Net::GitHub::V3->new( access_token => $self->config->GH_token );
  $gh->set_default_user_repo($self->user, $self->repo);
  return $gh;
}

method _build_repo {
  return $self->config->GH_repo;
}

method _build_user {
  return $self->config->GH_user;
}

=method submit_pr

  $http->submit_pr( "ExampleKAN" );

Submits a pull request using the identifier

=cut

method submit_pr($identifier, $body) {
  try {
    my $pull = $self->_github->pull_request->create_pull( {
      "title" => "NetKAN inflated: $identifier",
      "body"  => $body || "$identifier has been staged, please test and merge",
      "head"  => "$identifier",
      "base"  => "master"
    } );
    $self->info("PR for $identifier opened at $pull->{html_url}") if $pull->{html_url};
  } finally {
    if (@_) {
      my $error = join('', @_);
      $error =~ s/\n//g;
      $self->error("Pull Request Failed: $error");
    }
  };
}

with('App::KSP_CKAN::Roles::Logger');
1;
