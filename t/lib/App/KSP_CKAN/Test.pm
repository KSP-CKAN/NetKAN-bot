package App::KSP_CKAN::Test;

use v5.010;
use strict;
use warnings;
use autodie;
use Method::Signatures 20140224;
use Try::Tiny;
use File::Spec 'tmpdir';
use File::Path qw(remove_tree mkpath);
use File::chdir;
use File::Copy::Recursive qw(dircopy dirmove);
use Moo;
use namespace::clean;

# ABSTRACT: There is a bunch of common environment setup for testing.

# VERSION: Generated by DZP::OurPkg:Version

=head1 SYNOPSIS

  use App::KSP_CKAN::Test;

  my $test = App::KSP_CKAN::Test->new();

=head1 DESCRIPTION

This is a helper lib to make setting up our test environment quicker.

'tmp' can be used as a named argument to provide your own temp path.

=cut

has 'tmp'     => ( is => 'ro', lazy => 1, builder => 1 );
has '_tmp'    => ( is => 'ro', lazy => 1, builder => 1 );

method _build_tmp {
  return File::Spec->tmpdir()."/KSP_CKAN-test";
}

method _build__tmp {
  # We don't want stale test data
  if ( -d $self->tmp ) {
    remove_tree($self->tmp);
  }
  mkpath($self->tmp);

  # Populate our test data
  dircopy("t/data", $self->tmp."/data");

  return $self->tmp;
}

=method create_tmp

  $test->create_tmp;

This will deploy our temp environment. Only required if we 
aren't creating a repo (one will be built on demand).

=cut

method create_tmp {
  $self->_tmp;
  return;
}

=method create_repo

  $test->create_repo('CKAN-meta');

Turns the named repo into a working local remote.

=cut

method create_repo($repo) {
  local $CWD = $self->_tmp."/data/$repo";
  system("git", "init");
  system("git", "add", "-A");
  system("git", "commit", "-a", "-m", "Commit ALL THE THINGS!");
  chdir("../");
  dirmove("$repo", "$repo-tmp");
  system("git", "clone", "--bare", "$repo-tmp", "$repo");
  return;
}

=method create_ckan
  
  $test->create_ckan("Path to file");

Creates an example ckan that would pass validation at the specified
path.

=cut

method create_ckan($file) {
  # Lets us generate CKANs that are different.
  # http://www.perlmonks.org/?node_id=233023
  my @chars = ("A".."Z", "a".."z");
  my $rand;
  $rand .= $chars[rand @chars] for 1..8;

  # Create the CKAN
  open my $in, '>', $file;
  print $in qq{ "spec_version": 1, "identifier": "ExampleKAN", "license": "CC-BY-NC-SA", "ksp_version": "0.90", "name": "Example KAN", "abstract": "It's a $rand example!", "author": "Techman83", "version": "1.0.0.1", "download": "https://example.com/example.zip" };
  close $in;
  return;
}

=method cleanup
  
  $test->cleanup;

Does what it says on the tin, cleans up our mess.

=cut

=method create_config
  
  $test->create_config( optional => 0 );

Creates a dummy config file for testing. The 'optional'
defaults to true if unspecified, generating a test config 
with optional values.

=cut

method create_config(:$optional = 1, :$nogh = 0) {
  open my $in, '>', $self->_tmp."/.ksp-ckan";
  print $in "CKAN_meta=".$self->_tmp."/data/CKAN-meta\n";
  print $in "NetKAN=".$self->_tmp."/data/NetKAN\n";
  print $in "netkan_exe=https://ckan-travis.s3.amazonaws.com/netkan.exe\n";
  print $in "ckan_validate=https://raw.githubusercontent.com/KSP-CKAN/CKAN/master/bin/ckan-validate.py\n";
  print $in "ckan_schema=https://raw.githubusercontent.com/KSP-CKAN/CKAN/master/CKAN.schema\n";
  
  # TODO: This is a little ugly.
  if ($optional) {
    print $in "GH_token=123456789\n" if ! $nogh;
    print $in "working=".$self->_tmp."/working\n";
  }

  close $in;
  return;
}

=method cleanup
  
  $test->cleanup;

Does what it says on the tin, cleans up our mess.

=cut

method cleanup {
  if ( -d $self->_tmp ) {
    remove_tree($self->_tmp);
  }
  return;
}

1;
